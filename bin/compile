#!/bin/bash
# usage: bin/compile <build-dir> <cache-dir>
BP=$(dirname $(dirname $0))
source $BP/bin/functions.sh

if [[ -z "${1:-}" ]]; then
  err "Missing argument <build-dir>"
fi
BUILDDIR=$(cd "${1:-}/" && pwd)

if [[ -z "${2:-}" ]]; then
  err "Missing argument <cache-dir>"
fi
CACHEDIR=$(cd "${2:-}" && pwd)

if [[ ! -f "${BUILDDIR}/Logstash" ]]; then
  err "${BUILDDIR}/Logstash not found."
fi

# Source ubuntu distribution information
if [[ -f "/etc/lsb-release" ]]; then
  source /etc/lsb-release
fi

source ${BUILDDIR}/Logstash

# Default Values
# Logstash
LOGSTASH_CMD_ARGS=${LOGSTASH_CMD_ARGS:-""}
LOGSTASH_PLUGINS=${LOGSTASH_PLUGINS:-""}
LOGSTASH_CONFIG_CHECK=${LOGSTASH_CONFIG_CHECK:-1}
# List available releases: https://www.elastic.co/downloads/past-releases
LOGSTASH_VERSION=${LOGSTASH_VERSION:-$(cat ${BP}/VERSION)}
LOGSTASH_FILE=${LOGSTASH_FILE:-"logstash-${LOGSTASH_VERSION}.tar.gz"}
LOGSTASH_URL=${LOGSTASH_URL:-"https://artifacts.elastic.co/downloads/logstash/${LOGSTASH_FILE}"}
SHA1_EXT=${SHA1_EXT:-".sha1"}
OPENJDK_VERSION=${OPENJDK_VERSION:-"1.8.0_131"}
# List available releases: https://java-buildpack.cloudfoundry.org/openjdk-jdk/trusty/x86_64/index.yml
OPENJDK_URL=${OPENJDK_URL:-"https://java-buildpack.cloudfoundry.org/openjdk-jdk/${DISTRIB_CODENAME:-trusty}/x86_64/openjdk-${OPENJDK_VERSION}.tar.gz"}

# Curator
CURATOR_ENABLED=${CURATOR_ENABLED:-0}
CURATOR_SCHEDULE=${CURATOR_SCHEDULE:-"@daily"}
CURATOR_COMPILE=${CURATOR_COMPILE:-0}
# Download link for curator 5.0.4 with python 3.6.1, valid ~ 10 years from 29.05.2017
CURATOR_PRECOMPILED="https://ds31s3.swisscom.com/logstash-buildpack/curator-5.0.4-python-3.6.1.tar.gz?AWSAccessKeyId=5484335407854a4c9dc88e01206fc148%2FCF_P8_2CB0C541_6550_4D1E_B84F_70D7C543FB29&Expires=1811424743&Signature=ouoSXsihs10xAJVYJs9RI1Ioi6E%3D"

# List available releases: https://www.python.org/ftp/python/
PYTHON3_VERSION=${PYTHON3_VERSION:-"3.6.1"}
PYTHON3_URL=${PYTHON3_URL:-"https://www.python.org/ftp/python/${PYTHON3_VERSION}/Python-${PYTHON3_VERSION}.tgz"}
# List available releases: https://github.com/certifi/python-certifi/releases
CERTIFI_URL="https://github.com/certifi/python-certifi/archive/2017.04.17.tar.gz"
CERTIFI_TARGET="certifi-2017.04.17.tar.gz"
# List available releases: https://github.com/pallets/click/releases
CLICK_URL="https://github.com/pallets/click/archive/6.7.tar.gz"
CLICK_TARGET="click-6.7.tar.gz"
# List available releases: https://github.com/elastic/curator/releases
ELASTICSEARCH_CURATOR_URL="https://github.com/elastic/curator/archive/v5.0.4.tar.gz"
ELASTICSEARCH_CURATOR_TARGET="elasticsearch-curator-5.0.4.tar.gz"
# List available releases: https://github.com/elastic/elasticsearch-py/releases
ELASTICSEARCH_URL="https://github.com/elastic/elasticsearch-py/archive/5.4.0.tar.gz"
ELASTICSEARCH_TARGET="elasticsearch-5.4.0.tar.gz"
# List available releases: http://pyyaml.org/download/pyyaml/
PYYAML_URL="http://pyyaml.org/download/pyyaml/PyYAML-3.12.tar.gz"
PYYAML_TARGET="PyYAML-3.12.tar.gz"
# List available releases: https://github.com/shazow/urllib3/releases
URLLIB3_URL="https://github.com/shazow/urllib3/archive/1.21.1.tar.gz"
URLLIB3_TARGET="urllib3-1.21.1.tar.gz"
# List available releases: https://github.com/alecthomas/voluptuous/releases
VOLUPTUOUS_URL="https://github.com/alecthomas/voluptuous/archive/0.9.3.tar.gz"
VOLUPTUOUS_TARGET="voluptuous-0.9.3.tar.gz"

# Helper tools
# List available releases: https://github.com/jwilder/dockerize/releases/
DOCKERIZE_VERSION=${DOCKERIZE_VERSION:-"v0.4.0"}
DOCKERIZE_URL=${DOCKERIZE_URL:-"https://github.com/jwilder/dockerize/releases/download/${DOCKERIZE_VERSION}/dockerize-linux-amd64-${DOCKERIZE_VERSION}.tar.gz"}
# List available releases: https://github.com/stedolan/jq/releases/
JQ_URL=${JQ_URL:-"https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64"}
# List available releases: https://github.com/mcuadros/ofelia/releases/
OFELIA_VERSION="v0.2.2"
OFELIA_URL="https://github.com/mcuadros/ofelia/releases/download/${OFELIA_VERSION}/ofelia_${OFELIA_VERSION}_linux_amd64.tar.gz"
# " Correct syntax highlighting

mkdir -p ${BUILDDIR}/bin

# Install dockerize
if [[ ! -f ${BUILDDIR}/bin/dockerize ]]; then
  start "Installing dockerize"
  cd ${BUILDDIR}/bin
  ${CURL} ${DOCKERIZE_URL} | tar xzf -
  finished
  step "Downloaded ${DOCKERIZE_URL}"
fi

# Install jq
if [[ ! -f ${BUILDDIR}/bin/jq ]]; then
  start "Installing jq"
  ${CURL} -o ${BUILDDIR}/bin/jq ${JQ_URL}
  chmod +x ${BUILDDIR}/bin/jq
  finished
  step "Downloaded ${JQ_URL}"
fi

# Install ofelia
if [[ ! -f ${BUILDDIR}/bin/ofelia ]]; then
  start "Installing ofelia"
  ${CURL} ${OFELIA_URL} | tar xzf - -C ${BUILDDIR}/bin --strip-components=1
  finished
  step "Downloaded ${OFELIA_URL}"
fi

# Install curator
if [[ ${CURATOR_ENABLED} -eq 1 ]]; then
	if [[ ! -d ${BUILDDIR}/python3 ]]; then
	  if [[ ${CURATOR_COMPILE} -eq 0 ]]; then
		# Use precompiled curator with python from S3 bucket
		start "Download precompiled curator (with python)"
		cd ${BUILDDIR}
		${CURL} ${CURATOR_PRECOMPILED} | tar zxf -
		finished
	  else # Compile curator, dependecies and python
		step "Start installing curator (including its dependencies)"
		start "Download python3"
		mkdir -p ${BUILDDIR}/python3
		mkdir -p ${CACHEDIR}/python3
		cd ${CACHEDIR}/python3
		${CURL} ${PYTHON3_URL} | tar xzf -
		finished
		step "Downloaded ${PYTHON3_URL}"

		start "Compiling python3"
		# Detect # of CPUs so make jobs can be parallelized
		CPUS=`grep -c ^processor /proc/cpuinfo`

		pushd Python-3.4.3
		  ./configure --prefix=${BUILDDIR}/python3 | indent
		  make -j${CPUS} | indent
		  make install | indent
		popd
		# PATH: /home/vcap/app/python3/bin
		# ${BUILDDIR}/python3/bin
		finished

		step "Download curator and dependencies"
		mkdir -p ${BUILDDIR}/curator
		mkdir -p ${CACHEDIR}/curator
		start "Download certifi"
		${CURL} -o ${CACHEDIR}/curator/${CERTIFI_TARGET} ${CERTIFI_URL}
		finished

		start "Download click"
		${CURL} -o ${CACHEDIR}/curator/${CLICK_TARGET} ${CLICK_URL}
		finished

		start "Download elasticsearch-curator"
		${CURL} -o ${CACHEDIR}/curator/${ELASTICSEARCH_CURATOR_TARGET} ${ELASTICSEARCH_CURATOR_URL}
		finished

		start "Download elsticsearch"
		${CURL} -o ${CACHEDIR}/curator/${ELASTICSEARCH_TARGET} ${ELASTICSEARCH_URL}
		finished

		start "Download PyYAML"
		${CURL} -o ${CACHEDIR}/curator/${PYYAML_TARGET} ${PYYAML_URL}
		finished

		start "Download urllib3"
		${CURL} -o ${CACHEDIR}/curator/${URLLIB3_TARGET} ${URLLIB3_URL}
		finished

		start "Download voluptuous"
		${CURL} -o ${CACHEDIR}/curator/${VOLUPTUOUS_TARGET} ${VOLUPTUOUS_URL}
		finished

		step "All dependancies should be in ${CACHEDIR}/curator"
		find ${CACHEDIR}/curator | indent

		export PATH=${BUILDDIR}/python3/bin:$PATH
		# --no-index prevents contacting pypi to download packages
		# --find-links tells pip where to look for the dependancies
		pip3 install --no-index --find-links ${CACHEDIR}/curator --install-option="--prefix=${BUILDDIR}/curator" elasticsearch-curator

		step "Installed to ${BUILDDIR}/curator"
		find ${BUILDDIR}/curator | indent
	  fi # end install curator

	  export PYTHONHOME=${BUILDDIR}/python3
	  export PYTHONPATH=${BUILDDIR}/curator/lib/python3.4/site-packages
	  export LC_ALL=en_US.UTF-8
	  export LANG=en_US.UTF-8

	  start "Curator version"
	  ${BUILDDIR}/curator/bin/curator_cli --version

	  start "Apply ofelia schedule for curator"
	  mkdir -p ${BUILDDIR}/ofelia

	  cat << EOF >> ${BUILDDIR}/ofelia/schedule.ini
[job-local "curator"]
schedule = ${CURATOR_SCHEDULE}
command = bin/curator.sh
EOF

	  finished

	  step "Create bin/curator.sh"
	  mkdir -p ${BUILDDIR}/.profile.d
	  echo 'PATH=${HOME}/python3/bin:${HOME}/curator/bin:${PATH}:${HOME}/bin' > ${BUILDDIR}/.profile.d/curator.sh
	  cat << EOF >> ${BUILDDIR}/bin/curator.sh
#!/bin/bash
export PYTHONHOME=\${HOME}/python3
export PYTHONPATH=\${HOME}/curator/lib/python3.4/site-packages
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export PATH=\${HOME}/python3/bin:\${HOME}/curator/bin:\${PATH}:\${HOME}/bin

\${HOME}/python3/bin/python3 \${HOME}/curator/bin/curator --config \${HOME}/curator.conf.d/curator.yml \${HOME}/curator.conf.d/actions.yml
EOF

	else # else install curator
	  # Create empty schedule.ini for ofelia
	  touch ${BUILDDIR}/ofelia/schedule.ini
	fi # end install curator
fi

# Install OpenJDK
if [[ ! -d ${BUILDDIR}/openjdk ]]; then
  start "Installing openjdk"
  mkdir -p ${BUILDDIR}/openjdk
  cd ${BUILDDIR}/openjdk
  ${CURL} ${OPENJDK_URL} | tar zxf -
  finished
  step "Downloaded ${OPENJDK_URL}"
fi

# Install Logstash
if [[ ! -d ${BUILDDIR}/logstash-${LOGSTASH_VERSION} ]]; then
  start "Installing Logstash ${LOGSTASH_VERSION}"
  ${CURL} -o "${CACHEDIR}/${LOGSTASH_FILE}" "${LOGSTASH_URL}"

  ${CURL} -o "${CACHEDIR}/${LOGSTASH_FILE}${SHA1_EXT}" "${LOGSTASH_URL}${SHA1_EXT}"
  cd ${CACHEDIR}
  test "$(sha1sum ${CACHEDIR}/${LOGSTASH_FILE} | awk ' { print $1 } ')" = "$(cat ${CACHEDIR}/${LOGSTASH_FILE}${SHA1_EXT})"

  tar -zx -C ${BUILDDIR} -f ${CACHEDIR}/${LOGSTASH_FILE}
  finished
  step "Downloaded ${LOGSTASH_URL}"
fi

export JAVA_HOME="${BUILDDIR}/openjdk"
export LS_HEAP_SIZE="${LS_HEAP_SIZE:-$(echo ${VCAP_APPLICATION} | ${BUILDDIR}/bin/jq '.limits.mem * .9 | floor')m}"

# Install Logstash Plugins
if [[ -n ${LOGSTASH_PLUGINS:-""} ]]; then
  step "Installing Logstash Plugins"
  LOGSTASH_PLUGIN_CMD="logstash-plugin"
  if [[ ! -x ${BUILDDIR}/logstash-${LOGSTASH_VERSION}/bin/${LOGSTASH_PLUGIN_CMD} ]]; then
    LOGSTASH_PLUGIN_CMD="plugin"
  fi
  for PLUGIN in "${LOGSTASH_PLUGINS[@]}"; do
    start "Installing Logstash Plugin ${PLUGIN}"
    ${BUILDDIR}/logstash-${LOGSTASH_VERSION}/bin/${LOGSTASH_PLUGIN_CMD} install ${PLUGIN} | indent
    finished
  done
fi

# Logstash config check
if [[ ${LOGSTASH_CONFIG_CHECK} -eq 1 ]]; then
  mkdir -p ${CACHEDIR}/logstash.conf.d

  start "Check Logstash configuration"
  ${BUILDDIR}/bin/dockerize -template ${BUILDDIR}/conf.d:${CACHEDIR}/logstash.conf.d
  cat ${CACHEDIR}/logstash.conf.d/* | indent
  ${BUILDDIR}/logstash-${LOGSTASH_VERSION}/bin/logstash -f ${CACHEDIR}/logstash.conf.d -t | indent
  finished
fi

step "Create buildpack-release-step.yml"
mkdir -p ${BUILDDIR}/logstash.conf.d
cat << EOF >> ${BUILDDIR}/buildpack-release-step.yml
---
default_process_types:
  web: bin/dockerize -template conf.d:logstash.conf.d /bin/bash -c bin/run.sh
EOF

step "Create bin/run.sh"
mkdir -p ${BUILDDIR}/.profile.d
echo 'PATH=${PATH}:${HOME}/bin:${HOME}/openjdk/bin' > ${BUILDDIR}/.profile.d/run.sh
cat << EOF >> ${BUILDDIR}/bin/run.sh
#!/bin/bash
# Prepare curator configuration
if [[ ${CURATOR_ENABLED} -eq 1 ]]; then
	if [[ -d \${HOME}/curator ]]; then
	  mkdir -p \${HOME}/curator.conf.d
	  \${HOME}/bin/dockerize -template \${HOME}/curator.d:\${HOME}/curator.conf.d
	fi

	# Run curator once to create the logstash index for today
	\${HOME}/bin/curator.sh

	# Start Ofelia for curator in the background
	\${HOME}/bin/ofelia daemon --config \${HOME}/ofelia/schedule.ini 2>&1 &
fi

# Start Logstash
export JAVA_HOME=\${HOME}/openjdk
export LS_HEAP_SIZE=${LS_HEAP_SIZE}
\${HOME}/logstash-${LOGSTASH_VERSION}/bin/logstash -f logstash.conf.d ${LOGSTASH_CMD_ARGS}
EOF

chmod +x ${BUILDDIR}/bin/*.sh

step "Buildpack compile finished"
